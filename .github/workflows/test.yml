name: Test
on:
  push:
    branches:
      - main
    tags:
      - "*"
  pull_request:
    paths:
      - ".github/workflows/test.yml"
      - "conda_lockfiles/**"
      - "tests/**"
      - "pyproject.toml"

concurrency:
  # Concurrency group that uses the workflow name and PR number if available
  # or commit SHA as a fallback. If a new build is triggered under that
  # concurrency group while a previous build is running it will be canceled.
  # Repeated pushes to a PR will cancel all previous builds, while multiple
  # merges to main will not cancel.
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  tests:
    name: ${{ matrix.os }}, py${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ["39", "310", "311", "312", "313"]
        include:
          - os: macos-13
            python-version: "39"
          - os: macos-14
            python-version: "313"
    env:
      PIXI_ENV_NAME: test-py${{ matrix.python-version }}
    steps:
      - uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4.1.6
        with:
          fetch-depth: 0
      - uses: prefix-dev/setup-pixi@ba3bb36eb2066252b2363392b7739741bb777659 # v0.8.1
        with:
          environments: ${{ env.PIXI_ENV_NAME }}
      - name: Setup project
        run: |
          echo "channels: [conda-forge]" > .pixi/envs/${{ env.PIXI_ENV_NAME }}/.condarc
          pixi run --environment ${{ env.PIXI_ENV_NAME }} conda info
      - name: Run tests
        run: pixi run --environment ${{ env.PIXI_ENV_NAME }} test --basetemp=${{ runner.os == 'Windows' && 'D:\\temp' || runner.temp }}

  build-conda:
    name: Build conda package (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13, macos-14]
    env:
      PYTHONUNBUFFERED: "1"
    steps:
      # Clean checkout of specific git ref needed for package metadata version
      # which needs env vars GIT_DESCRIBE_TAG and GIT_BUILD_STR:
      - name: Checkout Source
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          ref: ${{ github.ref }}
          clean: true
          fetch-depth: 0

      # Explicitly use Python 3.11 since each of the OSes has a different default Python
      - name: Setup Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: '3.11'

      - name: Detect Label
        shell: python
        run: |
          import re
          from pathlib import Path
          from os import environ
          from subprocess import check_output

          # unless otherwise specified, commits are uploaded to the dev label
          # e.g., `main` branch commits
          envs = {"ANACONDA_ORG_LABEL": "dev"}

          if "${{ github.ref_name }}".startswith("feature/"):
              # feature branch commits are uploaded to a custom label
              envs["ANACONDA_ORG_LABEL"] = "${{ github.ref_name }}"
          elif re.match(r"\d+(\.\d+)+\.x", "${{ github.ref_name }}"):
              # release branch commits are added to the rc label
              # see https://github.com/conda/infrastructure/issues/760
              _, name = "${{ github.repository }}".split("/")
              envs["ANACONDA_ORG_LABEL"] = f"rc-{name}-${{ github.ref_name }}"

              # if no releases have occurred on this branch yet then `git describe --tag`
              # will misleadingly produce a version number relative to the last release
              # and not relative to the current release branch, if this is the case we need
              # to override the version with a derivative of the branch name

              # override the version if `git describe --tag` does not start with the branch version
              last_release = check_output(["git", "describe", "--tag"], text=True).strip()
              prefix = "${{ github.ref_name }}"[:-1]  # without x suffix
              if not last_release.startswith(prefix):
                  envs["VERSION_OVERRIDE"] = f"{prefix}0"

          Path(environ["GITHUB_ENV"]).write_text("\n".join(f"{name}={value}" for name, value in envs.items()))

      - name: Create & Upload
        uses: conda/actions/canary-release@eb545bb8ab48d499b31c057a6df3cf46753fdbcb # v25.3.1
        env:
          # Run conda-build in isolated activation to properly package conda
          _CONDA_BUILD_ISOLATED_ACTIVATION: 1
        with:
          package-name: ${{ github.event.repository.name }}
          subdir: ${{ matrix.subdir }}
          anaconda-org-channel: conda-canary
          anaconda-org-label: ${{ env.ANACONDA_ORG_LABEL }}
          anaconda-org-token: ${{ secrets.ANACONDA_ORG_CONDA_CANARY_TOKEN }}
